{"ast":null,"code":"import { call, put, takeEvery } from 'redux-saga/effects';\nimport { getUserRepos } from '../../../services/github.api';\nimport { GET_USER_REPOS, githubActions } from '../../actions/github';\nimport { alertActions } from '../../actions/alert';\nimport { loadingActions } from '../../actions/loading';\n\nfunction* fetchUserRepos(action) {\n  try {\n    yield put(loadingActions.startLoading());\n    const response = yield call(getUserRepos, action.payload.user);\n    yield put(githubActions.sucess({\n      user: action.payload.user,\n      repos: response.data\n    }));\n  } catch (ex) {\n    yield put(githubActions.fail(ex));\n    yield put(alertActions.openAlert({\n      message: 'Usuário não encontrado!'\n    }));\n  }\n\n  yield put(loadingActions.stopLoading());\n}\n\nexport function* reposSaga() {\n  yield takeEvery(GET_USER_REPOS, fetchUserRepos);\n}","map":{"version":3,"sources":["/Users/leticia.costa/WebstormProjects/frontend-github-api/src/redux/sagas/repos/index.js"],"names":["call","put","takeEvery","getUserRepos","GET_USER_REPOS","githubActions","alertActions","loadingActions","fetchUserRepos","action","startLoading","response","payload","user","sucess","repos","data","ex","fail","openAlert","message","stopLoading","reposSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAAUC,YAAV,QAA8B,8BAA9B;AACA,SAAQC,cAAR,EAAwBC,aAAxB,QAA4C,sBAA5C;AACA,SAAQC,YAAR,QAA2B,qBAA3B;AACA,SAAQC,cAAR,QAA6B,uBAA7B;;AAEA,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;AAC/B,MAAI;AACF,UAAMR,GAAG,CAACM,cAAc,CAACG,YAAf,EAAD,CAAT;AACA,UAAMC,QAAQ,GAAI,MAAMX,IAAI,CAACG,YAAD,EAAcM,MAAM,CAACG,OAAP,CAAeC,IAA7B,CAA5B;AACA,UAAMZ,GAAG,CAACI,aAAa,CAACS,MAAd,CAAqB;AAAED,MAAAA,IAAI,EAAGJ,MAAM,CAACG,OAAP,CAAeC,IAAxB;AAA8BE,MAAAA,KAAK,EAAGJ,QAAQ,CAACK;AAA/C,KAArB,CAAD,CAAT;AACD,GAJD,CAIE,OAAOC,EAAP,EAAW;AACX,UAAMhB,GAAG,CAACI,aAAa,CAACa,IAAd,CAAmBD,EAAnB,CAAD,CAAT;AACA,UAAMhB,GAAG,CAACK,YAAY,CAACa,SAAb,CAAuB;AAACC,MAAAA,OAAO,EAAG;AAAX,KAAvB,CAAD,CAAT;AACD;;AACD,QAAMnB,GAAG,CAACM,cAAc,CAACc,WAAf,EAAD,CAAT;AACD;;AAED,OAAO,UAAUC,SAAV,GAAsB;AAC3B,QAAMpB,SAAS,CAACE,cAAD,EAAiBI,cAAjB,CAAf;AACD","sourcesContent":["import { call, put,takeEvery } from 'redux-saga/effects'\nimport  { getUserRepos } from '../../../services/github.api'\nimport {GET_USER_REPOS, githubActions} from '../../actions/github'\nimport {alertActions} from '../../actions/alert'\nimport {loadingActions} from '../../actions/loading'\n\nfunction* fetchUserRepos(action) {\n  try {\n    yield put(loadingActions.startLoading())\n    const response  = yield call(getUserRepos,action.payload.user)\n    yield put(githubActions.sucess({ user : action.payload.user, repos : response.data,}))\n  } catch (ex) {\n    yield put(githubActions.fail(ex))\n    yield put(alertActions.openAlert({message : 'Usuário não encontrado!'}))\n  }\n  yield put(loadingActions.stopLoading())\n}\n\nexport function* reposSaga() {\n  yield takeEvery(GET_USER_REPOS, fetchUserRepos)\n}"]},"metadata":{},"sourceType":"module"}