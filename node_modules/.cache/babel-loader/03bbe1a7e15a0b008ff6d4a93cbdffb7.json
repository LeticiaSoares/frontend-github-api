{"ast":null,"code":"import { call, put, take } from 'redux-saga/effects';\nimport { getUserRepos } from '../../../apis/github.api';\nimport { STORE_USER_REPOS, githubActions, userActions } from '../../actions';\nimport { setUser } from '../../../infra/local-storage';\n\nfunction* fetchUserRepos(action) {\n  try {\n    yield call(getUserRepos, action.payload);\n    yield put(userActions.store(action.payload));\n    setUser({\n      email: action.payload.email\n    });\n    window.location.href = '/';\n  } catch (ex) {\n    yield put(userActions.fail(ex));\n    yield put(githubActions.openAlert({\n      message: 'Usuário não encontrado!'\n    }));\n  }\n}\n\nexport default fetchUserRepos;","map":{"version":3,"sources":["/Users/leticia.costa/WebstormProjects/github-api/src/redux/sagas/user/index.js"],"names":["call","put","take","getUserRepos","STORE_USER_REPOS","githubActions","userActions","setUser","fetchUserRepos","action","payload","store","email","window","location","href","ex","fail","openAlert","message"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,QAAgC,oBAAhC;AACA,SAAUC,YAAV,QAA8B,0BAA9B;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,WAA1C,QAA6D,eAA7D;AACA,SAASC,OAAT,QAAwB,8BAAxB;;AAEA,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;AAC/B,MAAI;AACF,UAAMT,IAAI,CAACG,YAAD,EAAcM,MAAM,CAACC,OAArB,CAAV;AACA,UAAMT,GAAG,CAACK,WAAW,CAACK,KAAZ,CAAkBF,MAAM,CAACC,OAAzB,CAAD,CAAT;AACAH,IAAAA,OAAO,CAAC;AAAEK,MAAAA,KAAK,EAAGH,MAAM,CAACC,OAAP,CAAeE;AAAzB,KAAD,CAAP;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACD,GALD,CAKE,OAAOC,EAAP,EAAW;AACX,UAAMf,GAAG,CAACK,WAAW,CAACW,IAAZ,CAAiBD,EAAjB,CAAD,CAAT;AACA,UAAMf,GAAG,CAACI,aAAa,CAACa,SAAd,CAAwB;AAACC,MAAAA,OAAO,EAAG;AAAX,KAAxB,CAAD,CAAT;AACD;AACF;;AAED,eAAeX,cAAf","sourcesContent":["import { call, put, take } from 'redux-saga/effects'\nimport  { getUserRepos } from '../../../apis/github.api'\nimport { STORE_USER_REPOS, githubActions, userActions } from '../../actions'\nimport { setUser } from '../../../infra/local-storage'\n\nfunction* fetchUserRepos(action) {\n  try {\n    yield call(getUserRepos,action.payload)\n    yield put(userActions.store(action.payload))\n    setUser({ email : action.payload.email})\n    window.location.href = '/'\n  } catch (ex) {\n    yield put(userActions.fail(ex))\n    yield put(githubActions.openAlert({message : 'Usuário não encontrado!'}))\n  }\n}\n\nexport default fetchUserRepos;"]},"metadata":{},"sourceType":"module"}