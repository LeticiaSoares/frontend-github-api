{"ast":null,"code":"import { call, put, takeEvery } from 'redux-saga/effects';\nimport { getRepoCommits } from '../../../apis/github.api';\nimport { GET_USER_REPOS, githubActions } from '../../actions';\nimport { fetchUserRepos } from \"../repos\";\nexport function* fetchCommits(action) {\n  try {\n    console.log('entrou aqui', action.payload);\n\n    const _ref = yield call(getRepoCommits, action.payload),\n          data = _ref.data;\n\n    yield put(githubActions.store({\n      commits: data\n    }));\n  } catch (e) {\n    yield put(githubActions.fail(e));\n  }\n}\nexport function* commitsSaga() {\n  yield takeEvery([GET_USER_REPOS, fetchUserRepos]);\n}","map":{"version":3,"sources":["/Users/leticia.costa/WebstormProjects/github-api/src/redux/sagas/commits/index.js"],"names":["call","put","takeEvery","getRepoCommits","GET_USER_REPOS","githubActions","fetchUserRepos","fetchCommits","action","console","log","payload","data","store","commits","e","fail","commitsSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,cAAT,QAA8B,0BAA9B;AACA,SAAQC,cAAR,EAAwBC,aAAxB,QAA4C,eAA5C;AACA,SAAQC,cAAR,QAA6B,UAA7B;AAEA,OAAO,UAAUC,YAAV,CAAuBC,MAAvB,EAA8B;AACjC,MAAG;AACCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BF,MAAM,CAACG,OAAjC;;AADD,iBAEmB,MAAMX,IAAI,CAACG,cAAD,EAAgBK,MAAM,CAACG,OAAvB,CAF7B;AAAA,UAESC,IAFT,QAESA,IAFT;;AAGC,UAAMX,GAAG,CAACI,aAAa,CAACQ,KAAd,CAAoB;AAAEC,MAAAA,OAAO,EAAGF;AAAZ,KAApB,CAAD,CAAT;AACH,GAJD,CAIC,OAAOG,CAAP,EAAU;AACP,UAAMd,GAAG,CAACI,aAAa,CAACW,IAAd,CAAmBD,CAAnB,CAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUE,WAAV,GAAwB;AAC3B,QAAMf,SAAS,CAAC,CAACE,cAAD,EAAiBE,cAAjB,CAAD,CAAf;AACH","sourcesContent":["import { call, put,takeEvery } from 'redux-saga/effects'\nimport { getRepoCommits} from '../../../apis/github.api'\nimport {GET_USER_REPOS, githubActions} from '../../actions'\nimport {fetchUserRepos} from \"../repos\";\n\nexport function* fetchCommits(action){\n    try{\n        console.log('entrou aqui',action.payload)\n        const { data }  = yield call(getRepoCommits,action.payload)\n        yield put(githubActions.store({ commits : data}))\n    }catch (e) {\n        yield put(githubActions.fail(e))\n    }\n}\n\nexport function* commitsSaga() {\n    yield takeEvery([GET_USER_REPOS, fetchUserRepos])\n}"]},"metadata":{},"sourceType":"module"}