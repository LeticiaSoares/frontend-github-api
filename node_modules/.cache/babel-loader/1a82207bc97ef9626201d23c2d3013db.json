{"ast":null,"code":"import { call, put, take, takeEvery } from 'redux-saga/effects';\nimport { getUserRepos } from '../../../apis/github.api';\nimport { GET_USER_REPOS, githubActions } from '../../actions';\n\nfunction* fetchUserRepos(action) {\n  try {\n    console.log('action', action);\n    const response = yield call(getUserRepos, action.payload.user);\n    yield put(githubActions.store({\n      user: action.payload.user,\n      repos: response.data\n    }));\n  } catch (ex) {\n    yield put(githubActions.fail(ex));\n  }\n}\n\nexport function* reposSaga() {\n  yield takeEvery(GET_USER_REPOS, fetchUserRepos);\n}","map":{"version":3,"sources":["/Users/leticia.costa/WebstormProjects/github-api/src/redux/sagas/repos/index.js"],"names":["call","put","take","takeEvery","getUserRepos","GET_USER_REPOS","githubActions","fetchUserRepos","action","console","log","response","payload","user","store","repos","data","ex","fail","reposSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAAUC,YAAV,QAA8B,0BAA9B;AACA,SAAQC,cAAR,EAAwBC,aAAxB,QAA4C,eAA5C;;AAEA,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;AAC/B,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBF,MAArB;AACA,UAAMG,QAAQ,GAAI,MAAMX,IAAI,CAACI,YAAD,EAAcI,MAAM,CAACI,OAAP,CAAeC,IAA7B,CAA5B;AACA,UAAMZ,GAAG,CAACK,aAAa,CAACQ,KAAd,CAAoB;AAAED,MAAAA,IAAI,EAAGL,MAAM,CAACI,OAAP,CAAeC,IAAxB;AAA8BE,MAAAA,KAAK,EAAGJ,QAAQ,CAACK;AAA/C,KAApB,CAAD,CAAT;AACD,GAJD,CAIE,OAAOC,EAAP,EAAW;AACX,UAAMhB,GAAG,CAACK,aAAa,CAACY,IAAd,CAAmBD,EAAnB,CAAD,CAAT;AACD;AACF;;AAED,OAAO,UAAUE,SAAV,GAAsB;AAC3B,QAAMhB,SAAS,CAACE,cAAD,EAAiBE,cAAjB,CAAf;AACD","sourcesContent":["import { call, put, take,takeEvery } from 'redux-saga/effects'\nimport  { getUserRepos } from '../../../apis/github.api'\nimport {GET_USER_REPOS, githubActions} from '../../actions'\n\nfunction* fetchUserRepos(action) {\n  try {\n    console.log('action',action)\n    const response  = yield call(getUserRepos,action.payload.user)\n    yield put(githubActions.store({ user : action.payload.user, repos : response.data,}))\n  } catch (ex) {\n    yield put(githubActions.fail(ex))\n  }\n}\n\nexport function* reposSaga() {\n  yield takeEvery(GET_USER_REPOS, fetchUserRepos)\n}"]},"metadata":{},"sourceType":"module"}