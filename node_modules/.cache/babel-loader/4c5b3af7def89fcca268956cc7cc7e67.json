{"ast":null,"code":"var _jsxFileName = \"/Users/leticia.costa/WebstormProjects/github-api/src/pages/listCommits/listCommits.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { getCommits, SELECTED_REPO } from \"../../redux/actions\";\nimport { startSagaRoot } from \"../../redux\";\n\nclass ListCommits extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onFilterCommits = e => {\n      this.props.commits.filter(item => {\n        return item.commit.message.toLowerCase().indexOf(value) !== -1;\n      });\n      this.setState({\n        filter: e.target.value\n      });\n    };\n\n    this.state = {\n      filterCommits: ''\n    };\n  }\n\n  componentDidMount() {\n    startSagaRoot();\n    const _this$props$match$par = this.props.match.params,\n          user = _this$props$match$par.user,\n          repo = _this$props$match$par.repo;\n    this.props.onSelectedRepo(user, repo);\n  }\n\n  render() {\n    const commits = this.props.commits;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Reposit\\xF3rio: \", this.props.match.params.repo, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), \"Digite o nome do commit \", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onFilterCommits,\n      value: this.state.filter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Author\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Mensagem\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, commits && commits.map(item => {\n      if (this.state.filter && this.state.filter === item.commit.message) {\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, item.commit.author.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, item.commit.author.date), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, item.commit.message));\n      }\n\n      return null;\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    commits: getCommits(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSelectedRepo(user, repo) {\n    dispatch({\n      type: SELECTED_REPO,\n      payload: {\n        user,\n        repo\n      }\n    });\n  }\n\n});\n\nexport default connect(state => mapStateToProps, mapDispatchToProps)(ListCommits);","map":{"version":3,"sources":["/Users/leticia.costa/WebstormProjects/github-api/src/pages/listCommits/listCommits.js"],"names":["React","connect","getCommits","SELECTED_REPO","startSagaRoot","ListCommits","Component","constructor","props","onFilterCommits","e","commits","filter","item","commit","message","toLowerCase","indexOf","value","setState","target","state","filterCommits","componentDidMount","match","params","user","repo","onSelectedRepo","render","map","author","name","date","mapStateToProps","mapDispatchToProps","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from \"react-redux\";\nimport {getCommits,SELECTED_REPO} from \"../../redux/actions\";\nimport {startSagaRoot} from \"../../redux\";\n\nclass ListCommits extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            filterCommits : ''\n        }\n    }\n    componentDidMount() {\n        startSagaRoot()\n        const { user ,repo } = this.props.match.params\n        this.props.onSelectedRepo(user,repo)\n    }\n\n    onFilterCommits = (e) =>{\n        this.props.commits.filter((item)=>{\n            return  item.commit.message.toLowerCase().indexOf(value) !== -1\n        })\n        this.setState({ filter : e.target.value})\n    }\n    render(){\n        const { commits } = this.props\n        return (\n            <React.Fragment>\n                Reposit√≥rio: {this.props.match.params.repo} <br></br>\n                Digite o nome do commit <input type='text' onChange={this.onFilterCommits} value={this.state.filter} />\n                <table>\n                    <thead>\n                    <tr>\n                        <th>Author</th>\n                        <th>Date</th>\n                        <th>Mensagem</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {commits && commits.map((item) => {\n                        if(this.state.filter && this.state.filter === item.commit.message){\n                            return (\n                                <tr>\n                                    <td>{item.commit.author.name}</td>\n                                    <td>{item.commit.author.date}</td>\n                                    <td>{item.commit.message}</td>\n                                </tr>\n                            )\n                        }\n                        return null\n                    })}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        commits: getCommits(state),\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    onSelectedRepo (user,repo) {\n        dispatch({\n            type: SELECTED_REPO,\n            payload: {user,repo}\n        })\n    }\n})\n\nexport default connect((state) =>\n        mapStateToProps,\n        mapDispatchToProps\n)(ListCommits)\n"]},"metadata":{},"sourceType":"module"}